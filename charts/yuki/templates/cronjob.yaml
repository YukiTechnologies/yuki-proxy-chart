{{- $endpoints := list 
  (dict "name" "system" "url" "https://prod.yukicomputing.com/health" "redisKey" "yuki-system-monitoring") 
  (dict "name" "compute" "url" "https://prod.yukicomputing.com/compute/health" "redisKey" "yuki-compute-monitoring") 
}}
{{- range $endpoint := $endpoints }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $endpoint.name }}-monitoring-job
spec:
  schedule: "*/1 * * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 30
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
            - name: curl-{{ $endpoint.name }}
              image: alpine/curl
              command: [ "/bin/sh" ]
              args:
                - "-c"
                - |
                  echo "Starting health check for {{ $endpoint.name }} endpoint: {{ $endpoint.url }}"
                  if curl -f --max-time 30 --retry 3 --retry-delay 1 {{ $endpoint.url }}; then
                    echo "✅ Health check PASSED for {{ $endpoint.name }}"
                    echo 'true' > /data/result.txt
                  else
                    echo "❌ Health check FAILED for {{ $endpoint.name }}"
                    echo 'false' > /data/result.txt
                  fi
                  echo "Health check result written to /data/result.txt"
              volumeMounts:
                - name: data-dir
                  mountPath: "/data"
          containers:
            - name: set-{{ $endpoint.name }}-result
              image: redis:7-alpine
              command: [ "/bin/sh" ]
              args:
                - "-c"
                - |
                  echo "Reading health check result for {{ $endpoint.name }}..."
                  RESULT=$(cat /data/result.txt)
                  echo "Result: $RESULT"
                  echo "Setting Redis key '$REDIS_KEY' to '$RESULT' with 60s expiry..."
                  if redis-cli -h $REDIS_HOST -p ${REDIS_PORT:-6379} set $REDIS_KEY $RESULT EX 60; then
                    echo "✅ Successfully updated Redis key '$REDIS_KEY' for {{ $endpoint.name }}"
                  else
                    echo "❌ Failed to update Redis key '$REDIS_KEY' for {{ $endpoint.name }}"
                    exit 1
                  fi
              volumeMounts:
                - name: data-dir
                  mountPath: /data
              env:
                - name: REDIS_KEY
                  value: {{ $endpoint.redisKey | quote }}
                {{- range $key, $value := $.Values.app.container.env }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
                {{- end }}
          {{- with $.Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $.Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: OnFailure
          volumes:
            - name: data-dir
              emptyDir: { }
{{- end }}
