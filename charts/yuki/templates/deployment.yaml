apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Values.app.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/version: {{ .Release.Name }}-{{ .Release.Revision }}
    app: {{ .Values.app.name }}
    group: {{ .Values.app.group }}
spec:
  replicas: {{ .Values.app.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        group: {{ .Values.app.group }}
    spec:
      {{- if .Values.deployment.spec.tolerations.enabled }}
      tolerations:
        - key: {{ .Values.deployment.spec.tolerations.key }}
          operator: {{ .Values.deployment.spec.tolerations.operator }}
          value: {{ .Values.deployment.spec.tolerations.value }}
          effect: {{ .Values.deployment.spec.tolerations.effect }}
          tolerationSeconds: {{ .Values.deployment.spec.tolerations.tolerationSeconds }}
      {{- end }}
      {{- if .Values.deployment.spec.affinity.enabled }}
      affinity:
        {{- if .Values.deployment.spec.affinity.nodeAffinity }}
        nodeAffinity:
          {{- if .Values.deployment.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                {{- range .Values.deployment.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.matchExpressions }}
                  - key: {{ .key }}
                    operator: {{ .operator }}
                    values: [{{ .values | join ", " }}]
                {{- end }}
          {{- end }}
          {{- if .Values.deployment.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.deployment.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ .weight }}
              preference:
                matchExpressions:
                  {{- range .preference.matchExpressions }}
                  - key: {{ .key }}
                    operator: {{ .operator }}
                    values: [{{ .values | join ", " }}]
                  {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .Values.deployment.spec.affinity.podAffinity }}
        podAffinity:
          {{- if .Values.deployment.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
          requiredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.deployment.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
            - labelSelector:
                matchExpressions:
                  {{- range .labelSelector.matchExpressions }}
                  - key: {{ .key }}
                    operator: {{ .operator }}
                    values: [{{ .values | join ", " }}]
                  {{- end }}
              topologyKey: {{ .topologyKey }}
            {{- end }}
          {{- end }}
          {{- if .Values.deployment.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.deployment.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ .weight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    {{- range .podAffinityTerm.labelSelector.matchExpressions }}
                    - key: {{ .key }}
                      operator: {{ .operator }}
                      values: [{{ .values | join ", " }}]
                    {{- end }}
                topologyKey: {{ .podAffinityTerm.topologyKey }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .Values.deployment.spec.affinity.podAntiAffinity }}
        podAntiAffinity:
          {{- if .Values.deployment.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
          requiredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.deployment.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
            - labelSelector:
                matchExpressions:
                  {{- range .labelSelector.matchExpressions }}
                  - key: {{ .key }}
                    operator: {{ .operator }}
                    values: [{{ .values | join ", " }}]
                  {{- end }}
              topologyKey: {{ .topologyKey }}
            {{- end }}
          {{- end }}
          {{- if .Values.deployment.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.deployment.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ .weight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    {{- range .podAffinityTerm.labelSelector.matchExpressions }}
                    - key: {{ .key }}
                      operator: {{ .operator }}
                      values: [{{ .values | join ", " }}]
                    {{- end }}
                topologyKey: {{ .podAffinityTerm.topologyKey }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Values.app.name }}
          image: {{ .Values.app.container.image }}
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.app.container.port }}
          env:
            - name: REDIS_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: redis-encryption-key
                  key: password
            {{- range $key, $value := $.Values.app.container.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if and .Values.secret .Values.secret.aws.enabled }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.aws.name }}
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.aws.name }}
                  key: AWS_SECRET_ACCESS_KEY
            {{- end }}